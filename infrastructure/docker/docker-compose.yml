# Визначаємо мережу, в якій будуть працювати наші сервіси
# Це дозволить їм звертатися один до одного за іменами (напр., http://api-gateway:8080)
networks:
  restaurant-net:
    driver: bridge

# Описуємо наші сервіси
services:

  # Сервіс API-шлюзу
  api-gateway:
    build:
      context: ./services/api-gateway
      # Шлях до Dockerfile відносно директорії context
      dockerfile: ../../infrastructure/docker/api-gateway.Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - restaurant-net

  # Сервіс замовлень
  orders-service:
    build:
      context: ./services/orders-service
      # Шлях до Dockerfile відносно директорії context
      dockerfile: ../../infrastructure/docker/orders-service.Dockerfile
    container_name: orders-service
    ports:
      - "8081:8081"
    networks:
      - restaurant-net
    

  # Сервіс автентифікації
  auth-service:
    build:
      context: ./services/auth-service
      # Dockerfile для auth-service знаходиться прямо в його директорії
      dockerfile: ../../infrastructure/docker/auth-service.Dockerfile
    container_name: auth-service
    # Ми не "виставляємо" (expose) порт назовні (на хост-машину),
    # оскільки доступ до цього сервісу має йти виключно через API Gateway.
    # Docker Compose все одно зробить порт 8000 доступним для інших контейнерів у тій же мережі.
    ports:
      - "8000"
    networks:
      - restaurant-net
    # Створюємо "живий зв'язок" між папкою на вашому комп'ютері та папкою в контейнері
    volumes:
      - ./services/auth-service:/app
    # Змінюємо команду запуску, додаючи прапорець --reload
    # Тепер сервер uvicorn буде автоматично перезавантажуватися при змінах у коді
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
