# Визначаємо мережу, в якій будуть працювати наші сервіси
# Це дозволить їм звертатися один до одного за іменами (напр., http://api-gateway:8080)
networks:
  restaurant-net:
    driver: bridge

# Описуємо наші сервіси
services:

  # Сервіс API-шлюзу
  api-gateway:
    build:
      context: ./services/api-gateway
      # Шлях до Dockerfile відносно директорії context
      dockerfile: ../../infrastructure/docker/api-gateway.Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - restaurant-net

  # Сервіс замовлень
  orders-service:
    build:
      context: ./services/orders-service
      # Шлях до Dockerfile відносно директорії context
      dockerfile: ../../infrastructure/docker/orders-service.Dockerfile
    container_name: orders-service
    ports:
      - "8081:8081"
    networks:
      - restaurant-net

  # Сервіс автентифікації
  auth-service:
    build:
      context: ./services/auth-service
      # Dockerfile для auth-service знаходиться прямо в його директорії
      dockerfile: ../../infrastructure/docker/auth-service.Dockerfile
    container_name: auth-service
    environment:                                                                                                   
      - DATABASE_URL=postgresql+asyncpg://auth_user:auth_pass@auth-db:5432/auth_db
      - JWT_SECRET_KEY=your_super_secret_key
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    networks:
      - restaurant-net
    # Створюємо "живий зв'язок" між папкою на вашому комп'ютері та папкою в контейнері
    volumes:
      - ./services/auth-service:/app
    # Змінюємо команду запуску, додаючи прапорець --reload
    # Тепер сервер uvicorn буде автоматично перезавантажуватися при змінах у коді
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      auth-db:
        condition: service_healthy
  
  # База даних для сервісу автентифікації
  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_pass
    ports:
      - "5439:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - restaurant-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Сервіс користувачів
  user-service:
    build:
      context: ./services/user-service
      dockerfile: ../../infrastructure/docker/user-service.Dockerfile
    container_name: user-service
    environment:
      - MONGO_URL=mongodb://user-db:27017
      - DB_NAME=user_db
    ports:
      - "3002:3002"
    networks:
      - restaurant-net
    # Налаштовуємо volume для "гарячого перезавантаження"
    volumes:
      # Синхронізуємо код з хост-машини в контейнер
      - ./services/user-service:/usr/src/app
      # Цей трюк запобігає перезаписуванню node_modules контейнера
      # локальною папкою node_modules, що важливо для сумісності
      - /usr/src/app/node_modules
    depends_on:
      - user-db

  # База даних для сервісу користувачів
  user-db:
    image: mongo:latest
    container_name: user-db
    ports:
      - "27017:27017"
    volumes:
      - user-db-data:/data/db
    networks:
      - restaurant-net

# Створюємо іменовані volume для зберігання даних баз
volumes:
  auth-db-data:
  user-db-data: